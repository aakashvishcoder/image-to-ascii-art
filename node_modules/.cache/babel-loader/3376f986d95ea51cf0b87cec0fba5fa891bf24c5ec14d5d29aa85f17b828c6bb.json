{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aakas\\\\OneDrive\\\\Desktop\\\\Coding\\\\image to ascii art convertor\\\\image-to-ascii-art\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ASCII_CHARS = \"@#8&$%*o!;.\"; // From dark to light\n\nfunction App() {\n  _s();\n  const [asciiArt, setAsciiArt] = useState(\"\");\n  const canvasRef = useRef();\n  const handleFile = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = () => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        const width = 100; // width in characters\n        const scale = width / img.width;\n        const height = img.height * scale;\n        canvas.width = width;\n        canvas.height = height;\n        ctx.drawImage(img, 0, 0, width, height);\n        const imageData = ctx.getImageData(0, 0, width, height);\n        const data = imageData.data;\n        let ascii = \"\";\n        for (let y = 0; y < height; y++) {\n          for (let x = 0; x < width; x++) {\n            const offset = (y * width + x) * 4;\n            const r = data[offset];\n            const g = data[offset + 1];\n            const b = data[offset + 2];\n            const avg = (r + g + b) / 3;\n            const charIndex = Math.floor(avg / 255 * (ASCII_CHARS.length - 1));\n            ascii += ASCII_CHARS.charAt(charIndex);\n          }\n          ascii += \"\\n\";\n        }\n        setAsciiArt(ascii);\n      };\n      img.src = reader.result;\n    };\n    reader.readAsDataURL(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image to ASCII Art\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      className: \"ascii\",\n      children: asciiArt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3OgCEHaMCgIk3SBpGznalgPWb9I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","ASCII_CHARS","App","_s","asciiArt","setAsciiArt","canvasRef","handleFile","e","file","target","files","reader","FileReader","onload","img","Image","canvas","current","ctx","getContext","width","scale","height","drawImage","imageData","getImageData","data","ascii","y","x","offset","r","g","b","avg","charIndex","Math","floor","length","charAt","src","result","readAsDataURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","ref","style","display","_c","$RefreshReg$"],"sources":["C:/Users/aakas/OneDrive/Desktop/Coding/image to ascii art convertor/image-to-ascii-art/src/App.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./App.css\";\n\nconst ASCII_CHARS = \"@#8&$%*o!;.\" // From dark to light\n\nfunction App() {\n  const [asciiArt, setAsciiArt] = useState(\"\");\n  const canvasRef = useRef();\n\n  const handleFile = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = () => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n\n        const width = 100; // width in characters\n        const scale = width / img.width;\n        const height = img.height * scale;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        ctx.drawImage(img, 0, 0, width, height);\n\n        const imageData = ctx.getImageData(0, 0, width, height);\n        const data = imageData.data;\n\n        let ascii = \"\";\n        for (let y = 0; y < height; y++) {\n          for (let x = 0; x < width; x++) {\n            const offset = (y * width + x) * 4;\n            const r = data[offset];\n            const g = data[offset + 1];\n            const b = data[offset + 2];\n            const avg = (r + g + b) / 3;\n\n            const charIndex = Math.floor((avg / 255) * (ASCII_CHARS.length - 1));\n            ascii += ASCII_CHARS.charAt(charIndex);\n          }\n          ascii += \"\\n\";\n        }\n\n        setAsciiArt(ascii);\n      };\n      img.src = reader.result;\n    };\n    reader.readAsDataURL(file);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Image to ASCII Art</h1>\n      <input type=\"file\" accept=\"image/*\" onChange={handleFile} />\n      <pre className=\"ascii\">{asciiArt}</pre>\n      <canvas ref={canvasRef} style={{ display: \"none\" }} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,WAAW,GAAG,aAAa,EAAC;;AAElC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMS,SAAS,GAAGR,MAAM,CAAC,CAAC;EAE1B,MAAMS,UAAU,GAAIC,CAAC,IAAK;IACxB,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACF,IAAI,EAAE;IAEX,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;MACpB,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACD,MAAM,GAAG,MAAM;QACjB,MAAMG,MAAM,GAAGX,SAAS,CAACY,OAAO;QAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;QAEnC,MAAMC,KAAK,GAAG,GAAG,CAAC,CAAC;QACnB,MAAMC,KAAK,GAAGD,KAAK,GAAGN,GAAG,CAACM,KAAK;QAC/B,MAAME,MAAM,GAAGR,GAAG,CAACQ,MAAM,GAAGD,KAAK;QAEjCL,MAAM,CAACI,KAAK,GAAGA,KAAK;QACpBJ,MAAM,CAACM,MAAM,GAAGA,MAAM;QAEtBJ,GAAG,CAACK,SAAS,CAACT,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEM,KAAK,EAAEE,MAAM,CAAC;QAEvC,MAAME,SAAS,GAAGN,GAAG,CAACO,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEL,KAAK,EAAEE,MAAM,CAAC;QACvD,MAAMI,IAAI,GAAGF,SAAS,CAACE,IAAI;QAE3B,IAAIC,KAAK,GAAG,EAAE;QACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,EAAEM,CAAC,EAAE,EAAE;UAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,EAAES,CAAC,EAAE,EAAE;YAC9B,MAAMC,MAAM,GAAG,CAACF,CAAC,GAAGR,KAAK,GAAGS,CAAC,IAAI,CAAC;YAClC,MAAME,CAAC,GAAGL,IAAI,CAACI,MAAM,CAAC;YACtB,MAAME,CAAC,GAAGN,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC;YAC1B,MAAMG,CAAC,GAAGP,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC;YAC1B,MAAMI,GAAG,GAAG,CAACH,CAAC,GAAGC,CAAC,GAAGC,CAAC,IAAI,CAAC;YAE3B,MAAME,SAAS,GAAGC,IAAI,CAACC,KAAK,CAAEH,GAAG,GAAG,GAAG,IAAKlC,WAAW,CAACsC,MAAM,GAAG,CAAC,CAAC,CAAC;YACpEX,KAAK,IAAI3B,WAAW,CAACuC,MAAM,CAACJ,SAAS,CAAC;UACxC;UACAR,KAAK,IAAI,IAAI;QACf;QAEAvB,WAAW,CAACuB,KAAK,CAAC;MACpB,CAAC;MACDb,GAAG,CAAC0B,GAAG,GAAG7B,MAAM,CAAC8B,MAAM;IACzB,CAAC;IACD9B,MAAM,CAAC+B,aAAa,CAAClC,IAAI,CAAC;EAC5B,CAAC;EAED,oBACET,OAAA;IAAK4C,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB7C,OAAA;MAAA6C,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BjD,OAAA;MAAOkD,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,SAAS;MAACC,QAAQ,EAAE7C;IAAW;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5DjD,OAAA;MAAK4C,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEzC;IAAQ;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvCjD,OAAA;MAAQqD,GAAG,EAAE/C,SAAU;MAACgD,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV;AAAC9C,EAAA,CAzDQD,GAAG;AAAAsD,EAAA,GAAHtD,GAAG;AA2DZ,eAAeA,GAAG;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}